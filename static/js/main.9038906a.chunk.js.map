{"version":3,"sources":["components/products/product.js","components/products/Men-shoes.js","App.js","serviceWorker.js","index.js"],"names":["Products","state","photos","axios","get","then","res","console","log","setState","data","this","photoList","length","map","className","key","_id","src","url","title","price","React","Component","MenShoes","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iQA+CiBA,E,4MA3CbC,MAAQ,CACJC,OAAO,I,kEAGS,IAAD,OACfC,IAAMC,IAAI,wDAAwDC,MAAK,SAACC,GACpEC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACVP,OAAQI,EAAII,Y,+BAKb,IACCR,EAAWS,KAAKV,MAAhBC,OACFU,EAAYV,EAAOW,OACrBX,EAAOY,KAAI,SAAAZ,GACP,OAEI,yBAAKa,UAAU,iBAAiBC,IAAKd,EAAOe,KACxC,yBAAKC,IAAKhB,EAAOiB,IAAKJ,UAAU,yBAChC,2BAAIb,EAAOkB,OACX,2BAAIlB,EAAOmB,WAMvB,yBAAKN,UAAU,OACX,yBAAKA,UAAU,OACf,yBAAKA,UAAU,oBAAf,mBAKV,OACE,yBAAKA,UAAU,YACVH,O,GAtCUU,IAAMC,WCiBZC,E,uKAhBX,OACE,yBAAKT,UAAU,kCACb,wBAAIA,UAAU,mBAAd,kBACA,yBAAKA,UAAU,YACb,yBAAKA,UAAU,uCACX,uBAAGA,UAAU,0BAAb,aACA,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,8BAAf,qBACA,kBAAC,EAAD,a,GAVOO,IAAMC,WCSdE,E,uKANX,OACE,kBAAC,EAAD,U,GAHYH,IAAMC,WCSJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.9038906a.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass Products extends React.Component {\n    state = {\n        photos:[]\n    }\n\n    componentDidMount(){\n        axios.get('https://quiet-earth-55477.herokuapp.com/api/products').then((res) => {\n            console.log(res);\n            this.setState({\n                photos: res.data\n            })\n        })\n    }\n\n    render () {\n        const { photos } = this.state;\n        const photoList = photos.length ? (\n            photos.map(photos => {\n                return (\n\n                    <div className='col-md-3 col-6' key={photos._id}>\n                        <img src={photos.url} className='img-responsive w-100' />\n                        <p>{photos.title}</p>\n                        <p>{photos.price}</p>\n                    </div>\n                \n                )\n            })\n        ) : (\n            <div className='row'>\n                <div className='col'>\n                <div className='text-center px-3'>No photos yet</div>\n                </div>\n            </div>\n        );\n\n      return (\n        <div className='row px-3' >\n            {photoList}\n        </div>\n      )\n    }\n  }\n  \n  export default Products;","import React from 'react';\nimport Products from './product'\nclass MenShoes extends React.Component {\n    render () {\n      return (\n        <div className='container-fluid px-5 bg-danger'>\n          <h1 className='text-center p-3'>E-commerce app</h1>\n          <div className='row px-5'>\n            <div className='col-12  text-danger bg-white shadow'>\n                <p className='pt-3 text-left h4 px-3'>Men Shoes</p>\n                <div className='dropdown-divider'></div>\n                <div className='text-danger  text-left p-3'>12 products found</div>\n                <Products/>\n            </div>\n          </div>\n        </div>\n      )\n    }\n  }\n  \n  export default MenShoes;","import React from 'react';\nimport MenShoes from './components/products/Men-shoes'\n\nclass App extends React.Component {\n  render () {\n    return (\n      <MenShoes/>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}